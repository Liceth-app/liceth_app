rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }
    
    match /periods/{docId} {
      allow read: if request.auth != null && (resource != null && resource.data.uid == request.auth.uid);
      allow write: if request.auth != null && (resource == null || resource.data.uid == request.auth.uid) && (request.resource == null || request.resource.data.uid == request.auth.uid);
    }

    
    match /invites/{docId} {
    	allow get: if true;
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow delete: if true;
    }
    
    match /follows/{docId} {
    	allow read, delete: if request.auth != null && resource != null 
      	&& (resource.data.follower == request.auth.uid || resource.data.followee == request.auth.uid)
      allow create: if canFollow(docId);
    }
    
    function isValidInvite(invite, followee) {
    	let inviter = get(/databases/$(database)/documents/invites/$(invite)).data.uid;
    	let expiration = get(/databases/$(database)/documents/invites/$(invite)).data.expiration;
    	return inviter == followee 
      	&& expiration >= request.time.toMillis()
      	&& !existsAfter(/databases/$(database)/documents/invites/$(invite));
    }
    
    function canFollow(docId) {
    	let r = docId.split("_");
      let invite = request.resource.data.invite;
      let follower = r[0];
      let followee = r[1];
      let isValidFollower = follower.matches("^[a-zA-Z0-9]+$");
      let isValidFollowee = followee.matches("^[a-zA-Z0-9]+$");
      return r.length == 2 
      	&& isValidFollower
        && isValidFollowee
        && follower == request.auth.uid
      	&& isValidInvite(invite, followee)
        && request.resource.data.follower == follower
        && request.resource.data.followee == followee
        ;
    }
  }
}